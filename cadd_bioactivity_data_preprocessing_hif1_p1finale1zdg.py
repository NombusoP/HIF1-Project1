# -*- coding: utf-8 -*-
"""CADD_bioactivity_data_preprocessing_hif1_p1finale1zdg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/NombusoP/COMPUTATIONAL-DRUG-DISCOVERY/blob/main/CADD_bioactivity_data_preprocessing_hif1_p1finale1zdg.ipynb

#COMPUTATIONAL DRUG DISCOVERY PROJECT P1.
#Collection and preprocessing of bioactivity data from ChEMBL database



Importing Libraries
"""

!pip install chembl_webresource_client

!pip install rdkit

import math
from pathlib import Path
from zipfile import ZipFile
from tempfile import TemporaryDirectory

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import cm
import pandas as pd
from chembl_webresource_client.new_client import new_client
from tqdm.auto import tqdm
from IPython.display import Image
import plotly
import plotly.express as px
import plotly.graph_objects as go


from rdkit.Chem import PandasTools
from rdkit import Chem

import IPython

uniprot_id='Q16665'

from IPython.display import Image
print('PDB:1H2M','\n','HIF-1 in complex with HIF-1 alpha fragment peptide','\n','HIF-1 alpha in cyan colour')
Image(filename='1h2m.png',width=400,height=250)

"""api access"""

targets_api=new_client.target
compounds_api=new_client.molecule
bioactivities_api=new_client.activity

"""
get target data from ChEMBL,
get UniProt ID of the target"""

targets = targets_api.get(target_components__accession=uniprot_id).only(
    "target_chembl_id", "organism", "pref_name", "target_type"
)
print(f'The type of the targets is "{type(targets)}"')

"""search and  download Target protein data  from ChEMBL"""

target=new_client.target
target_query=target.search(' hypoxia inducible factor')
targets=pd.DataFrame.from_dict(target_query)
targets

"""Select the target (target ChEMBL ID)"""

selected_target=targets.target_chembl_id[1]
print('Target ChEMBL ID is :',selected_target)

prefered_name=targets['pref_name'][1]
prefered_name

""" information on the selected target"""

target=targets.iloc[1]
target

"""save the selcted ChEMBL ID"""

chembl_id=target.target_chembl_id
print('the selected ChEMBL ID is:',chembl_id)

"""OBTAIN BIOACTIVITY DATA( which is reported as IC50 values in nM)


-get bioactivity data for the target (Hypoxia-inducible factor 1 alpha)

-obtain, filter bioactivity data and it  should include the following:

-human proteins,

-bioactivity type IC50,

 -exact measurement(relation'='),

 -binding assays(assay type 'B')
"""

bioactivities = bioactivities_api.filter(
    target_chembl_id=chembl_id, type="IC50", relation="=", assay_type="B",
).only(

    "activity_id",
    "assay_chembl_id",
    "assay_description",
    "assay_type",
    "molecule_chembl_id",
    "type",
    "standard_units",
    "relation",
    "standard_value",
    "target_chembl_id",
    "target_organism",
)

print(f"Length and type of bioactivities object: {len(bioactivities)}, {type(bioactivities)}")

"""information on the filtered bioactivity data"""

print(f"Length and type of first element: {len(bioactivities[1])}, {type(bioactivities[1])}")
bioactivities[1]

"""Download bioactivty data from ChEMBL in a pandas data frame (DF) format"""

bioactivities_df = pd.DataFrame.from_dict(bioactivities)
print(f"DataFrame shape: {bioactivities_df.shape}")
bioactivities_df.head()

"""-standard_units and units columns have the same entry

-standard_value/value columns also have the same entry,

-in this case ChEMBL standardised  column will be used , thus dropping values and units columns

checking  'units' and 'standard_units' columns whether the value measurements in these columns are the similar
"""

bioactivities_df['units'].unique()

bioactivities_df['standard_units'].unique()

"""dropping 'values' and 'units' columns"""

bioactivities_df.drop(["units", "value"], axis=1, inplace=True)
bioactivities_df.head()

"""also check the column 'type' which holds the IC50 data,
- check if  this bioactivity data is ONLY recorded as IC50
"""

bioactivities_df['type'].unique()

"""PREPROCESS AND FILTER BIOACTIVITY DATA

1.convert datatype for  standard_values column from object dtype  to float dtype

-standard_value column contains standardised(IC50) values.

-to use the values for subsequent calculations and analysis ,convert values to float dtype
"""

bioactivities_df.dtypes

bioactivities_df = bioactivities_df.astype({"standard_value": "float64"})
bioactivities_df.dtypes

"""check whether the standard_value dtype is now a float"""

bioactivities_df['standard_value'].dtypes

"""2. check and delete entries with missing values
-check all missing values reported as 'NA','',np.NaN,None

-can aslo use isnull () function for checking  any missing values

"""

missing_values=['NA','',np.NaN,None]
missing=bioactivities_df.isin(missing_values)
print(missing)

"""code for deleting missing entries"""

bioactivities_df.dropna(axis=0, how="any", inplace=True)
print(f"DataFrame shape: {bioactivities_df.shape}")

"""checking shape of DF, number of rows and columns"""

bioactivities_df.shape

number_rows,number_columns=bioactivities_df.shape
print('number of rows:',number_rows,'\n','number of columns:',number_columns)

"""create heatmap to check for missing data"""

sns.heatmap(bioactivities_df.isnull())

bioactivities_df.isnull().sum()

"""3. keep entries with standard_unit=='nM' unit measurement

"""

print(f"Units in downloaded data: {bioactivities_df['standard_units'].unique()}")
print(
    f"Number of non-nM entries:\
    {bioactivities_df[bioactivities_df['standard_units'] != 'nM'].shape[0]}"
)

"""check if the standard_units column has only nM entries,

- check DF shape i.e number of rows and columns
"""

bioactivities_df['standard_units'].unique()

bioactivities_df = bioactivities_df[bioactivities_df["standard_units"] == "nM"]
print(f"Units after filtering: {bioactivities_df['standard_units'].unique()}")

print(f"DataFrame shape: {bioactivities_df.shape}")

"""drop  duplicate entries, and keep first entries of the same molecule_chembl_id,

-check DF shape
"""

bioactivities_df.drop_duplicates("molecule_chembl_id", keep="first", inplace=True)
print(f"DataFrame shape: {bioactivities_df.shape}")

"""rename DF"""

hif_bioactivities_df2a=bioactivities_df
hif_bioactivities_df2a.head()

"""checking data frame(DF) shape after dropping duplicates"""

hif_bioactivities_df2a.shape

"""OBTAIN COMPOUND DATA"""

compounds_provider = compounds_api.filter(
    molecule_chembl_id__in=list(bioactivities_df["molecule_chembl_id"])
).only("molecule_chembl_id", "molecule_structures")

"""Download compound data from ChEMBL"""

compounds = list(tqdm(compounds_provider))

compounds_df = pd.DataFrame.from_records(
    compounds,
)
print(f"DataFrame shape: {compounds_df.shape}")

compounds_df.head()

compounds_df.shape

"""Preprocessing  and filtering of the  compound data

-checking missing entries of compounds DF,

-remove missing entriess

-delete duplicates

-obtain molcules with canonical smiles only
"""

#heatmap for checking missing entries
sns.heatmap(compounds_df.isnull())

"""1. remove any missing entries"""

compounds_df.dropna(axis=0, how="any", inplace=True)
print(f"DataFrame shape: {compounds_df.shape}")

"""2. delete molecules with duplicate entries"""

compounds_df.drop_duplicates("molecule_chembl_id", keep="first", inplace=True)
print(f"DataFrame shape: {compounds_df.shape}")

"""3. obtain molecules with canonical smiles"""

compounds_df.iloc[0].molecule_structures.keys()

canonical_smiles = []

for i, compounds in compounds_df.iterrows():
    try:
        canonical_smiles.append(compounds["molecule_structures"]["canonical_smiles"])
    except KeyError:
        canonical_smiles.append(None)

compounds_df["smiles"] = canonical_smiles
compounds_df.drop("molecule_structures", axis=1, inplace=True)
print(f"DataFrame shape: {compounds_df.shape}")

"""all molecules without canonical smiles string  to be removed"""

compounds_df.dropna(axis=0, how="any", inplace=True)
print(f"DataFrame shape: {compounds_df.shape}")

"""rechecking missing entries of the compounds DF"""

compounds_df.isnull().sum()

"""Bioactivity data and Compound data summary"""

print(f"Bioactivities filtered: {hif_bioactivities_df2a.shape[0]}")
hif_bioactivities_df2a.columns

bioactivity_column_names=hif_bioactivities_df2a.columns
print('bioactivities column summary :',"\n",bioactivity_column_names)

print(f"Compounds filtered: {compounds_df.shape[0]}")
compounds_df.columns

compound_column_names=compounds_df.columns
print('compound column  summary :','\n',compound_column_names)

"""-merge  both bioactivity and compoud DataFrame (DF)

-rename DF
"""

compounds_df.head(3)

hif_bioactivities_df2a.head(3)

"""merge data frames keeping selected parameters"""

output_df = pd.merge(
    hif_bioactivities_df2a[["molecule_chembl_id", "standard_value", "standard_units",]],
    compounds_df,
    on="molecule_chembl_id",
)

# Reset row indices
output_df.reset_index(drop=True, inplace=True)

print(f"Dataset with {output_df.shape[0]} entries.")

output_df.head()

"""rename data frame that has been merged




"""

hif_dfx=output_df
hif_dfx.head(3)

hif_dfx.shape

"""-add  RDKit column,

-sort molecules  by  pIC50 values




"""

PandasTools.AddMoleculeColumnToFrame(hif_dfx,smilesCol='smiles')

#molecules are sorted by pIC50
hif_dfx.sort_values(by='standard_value',ascending=False,inplace=True)

#reset index
hif_dfx.reset_index(drop=True,inplace=True)

hif_dfx

hif_dfx.head(3)

"""save DF to csv file"""

hif_dfx.to_csv('hifP1finale_bioactivity_data.csv',index=False)

"""Summary:

-bioactivity data of the target of interest ( hypoxia inducible factor 1 alpha) was collected,

-data was preprocessed, filtered  to obtain molecules that measured IC50 bioactivity values
"""